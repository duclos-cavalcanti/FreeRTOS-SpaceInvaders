#ifndef __main_H__
#define __main_H__

#define INITIAL_POINTS_THRESHOLD 1080
//Number of points needed to gain a new life

/**Player Ship Dimensions related*/
#define PLAYERSHIP_HEIGHT 10
#define PLAYERSHIP_WIDTH 30
#define PLAYERSHIP_Y_BEGIN SCREEN_HEIGHT*90/100

/**Creature Dimensions related*/
#define CREATURE_HEIGHT 21
#define CREATURE_WIDTH 27

/**Bottom Wall Dimensions related*/
#define BOTTOM_WALLTHICKNESS 3
#define BOTTOM_WALLPOSITION SCREEN_HEIGHT*95/100

/**Animation Dimensions related*/
#define CREATURE_SHOT_ANIMATION_W 12
#define CREATURE_SHOT_ANIMATION_H 12

#define SAUCER_SHOT_ANIMATION_W 12
#define SAUCER_SHOT_ANIMATION_H 12

#define WALL_SHOT_ANIMATION_W 11
#define WALL_SHOT_ANIMATION_H 15

/**State Machine related*/
#define BEGIN MainMenuState
#define STATE_DEBOUNCE_DELAY 250
#define STATE_QUEUE_LENGTH 1


/**
 * @brief Wrapper function used to catch errors during drawing
 * @param status integer that would indicate the drawing status of the to-be-wrapped function
 * @param msg string/char array that would indicate what type of error took place in case of one
 * @return void
 */
void checkDraw(unsigned char status, const char *msg);


/**
 * @name Column IDs
 * @brief Enum used to manipulate column of creatures in a readable manner
 */
typedef enum Columns_t{
    Column_1,
    Column_2,
    Column_3,
    Column_4,
    Column_5,
    Column_6,
    Column_7,
    Column_8
}Columns_t;



/**
 * @name Row IDs
 * @brief Enum used to manipulate rows of creatures in a readable manner
 */
typedef enum Rows_t{
    Row_1,
    Row_2,
    Row_3,
    Row_4,
    Row_5
}Rows_t;



/**
 * @name Game States
 * @brief Enum used to manipulate game states within the state machine task in a readable manner
 */
typedef enum GameState_t{
    MainMenuState,
    SinglePlayingState,
    MultiPlayingState,
    NextLevelState,
    PausedState,
    GameOverState,
    CheatsState,
    ResetGameState
}GameState_t;



/**
 * @name Selected Menu Option in the Main Menu Task
 * @brief Enum used to manipulate and highlight wich option in the Main Menu task is being considered by the player.
 */
typedef enum SelectedMenuOption_t{
    SinglePlayer,
    MultiPlayer,
    Cheats,
    Leave
}SelectedMenuOption_t;



/**
 * @name Possible Game Actions other than Shooting and Moving
 * @brief Enum used to manipulate and handle state machine instructions given which player outside action was chosen.
 */
typedef enum PlayerOutsideGameActions_t{
    NoAction,
    PauseGameAction,
    LostGameAction,
    WonGameAction,
    ResetGameAction
}PlayerOutsideGameActions_t;

/**
 * @name Selected Pause Option in the Paused Game Menu Task
 * @brief Enum used to manipulate and highlight wich option in the Paused Game Menu task is being considered by the player.
 */
typedef enum SelectedPausedGameOption_t{
    Resume,
    RestartReset
}SelectedPausedGameOption_t;



/**
 * @name Selected Game Over Option in the Game Over Menu Task
 * @brief Enum used to manipulate and highlight wich option in the Game Over Menu task is being considered by the player.
 */
typedef enum SelectedGameOverOption_t{
    PlayAgain,
    Quit
}SelectedGameOverOption_t;

/**
 * @name Types of Lives States/Aimation States
 * @brief Enum used to manipulate and control which animations on screen regarding the lost or gain of lives in-game.
 */
typedef enum LivesAnimation_t{
    LivesIntact,
    LivesLost,
    LivesGained
}LivesAnimation_t;

/**
 * @name Types of New Game States
 * @brief Enum used to manipulate and control which types of new games can be generated by the vPrepareGameValues function.
 */
typedef enum TypesOfNewGames_t{
    NewGameFromScratch,
    NewGameNextLevel,
    InfiniteLivesCheat,
    ChooseStartingLevelCheat,
    ChooseStartingScoreCheat
}TypesOfNewGames_t;


/**
 * @name Selected Cheat Option in the Cheats Menu Task
 * @brief Enum used to manipulate and highlight wich option in the Cheats Menu task is being considered by the player.
 */
typedef enum SelectedCheatsOption_t{
    InfiniteLives,
    ChooseStartingScore,
    ChooseStartingLevel
}SelectedCheatsOption_t;


/**Not Public functions, they are declared here to be switched around in the main.c*/
void vHandleStateMachineActivation();
unsigned char xCheckUDPInput(signed short* SaucerX);
void vPrepareImageSaucer(unsigned short* ImageIndex);
void vControlNewLivesAddition();
#endif 
